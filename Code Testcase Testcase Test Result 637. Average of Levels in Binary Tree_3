/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Double> averageOfLevels(TreeNode root) { 

        /**
        In a binary tree, each parent node can indeed have a maximum of two child nodes: a left child and a right child.
        However, since we don't know if there will be one or two children, we can't calculate the average by dividing by 2.
        We need to consider the size of each level in order to calculate the average correctly.
         */
        // Queue 는 왜 LinkedList?
        
        List<Double> result = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();

        // Baseline
        if (root == null) return result;
        queue.offer(root);

        double levelSum = 0;
        while (!queue.isEmpty()) {

            double levelSize = queue.size();
            levelSum = 0; // Reset the levelSum

            for (int i = 0; i < levelSize; i++) {
                TreeNode currentNode = queue.poll();
                levelSum += currentNode.val;
                
                if (currentNode.left != null) queue.offer(currentNode.left);
                if (currentNode.right != null) queue.offer(currentNode.right);
            }
            double avg = levelSum / levelSize; 
            result.add(avg);
            
        }
        return result;
    }
}
